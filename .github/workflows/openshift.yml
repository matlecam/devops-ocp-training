name: OpenShift Build and Deploy

env:
  OPENSHIFT_SERVER: ${{ secrets.OPENSHIFT_SERVER }}
  OPENSHIFT_TOKEN: ${{ secrets.OPENSHIFT_TOKEN }}
  OPENSHIFT_NAMESPACE: matlecam-dev
  APP_NAME: "deployment-test"
  IMAGE_REGISTRY: ghcr.io/${{ github.repository_owner }}
  IMAGE_REGISTRY_USER: ${{ github.actor }}
  IMAGE_REGISTRY_PASSWORD: ${{ secrets.GHCR_TOKEN }}
  IMAGE_TAGS: "1.0.${{ github.run_number }}"

on:
  push:
    branches: [ "main" ]

jobs:
  openshift-ci-cd:
    name: Build and Deploy to OpenShift
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Check out repository
      uses: actions/checkout@v4

    - name: Build and push Docker image
      id: build-image
      uses: redhat-actions/buildah-build@v2
      with:
        image: ${{ env.APP_NAME }}
        tags: ${{ env.IMAGE_TAGS }}
        dockerfiles: |
          ./Dockerfile

    - name: Push image to registry
      id: push-image
      uses: redhat-actions/push-to-registry@v2
      with:
        image: ${{ steps.build-image.outputs.image }}
        tags: ${{ steps.build-image.outputs.tags }}
        registry: ${{ env.IMAGE_REGISTRY }}
        username: ${{ env.IMAGE_REGISTRY_USER }}
        password: ${{ env.IMAGE_REGISTRY_PASSWORD }}

    - name: Install oc
      uses: redhat-actions/openshift-tools-installer@v1
      with:
        oc: 4

    - name: Log in to OpenShift
      uses: redhat-actions/oc-login@v1
      with:
        openshift_server_url: ${{ env.OPENSHIFT_SERVER }}
        openshift_token: ${{ env.OPENSHIFT_TOKEN }}
        insecure_skip_tls_verify: true
        namespace: ${{ env.OPENSHIFT_NAMESPACE }}

    - name: Deployment
      run: |
        export IMAGE=${{ steps.push-image.outputs.registry-path }}
        export OPENSHIFT_namespace=${{ env.OPENSHIFT_NAMESPACE }}
        export APP_NAME=${{ env.APP_NAME }}
        
        echo ${{ steps.push-image.outputs.registry-path }}
        sed -i 's|\${IMAGE}|'"$IMAGE"'|g' ocp-kusto/base/deployment-w-storage.yaml ocp-kusto/overlays/release/deployment-w-storage-patch.yaml ocp-kusto/base/service.yaml
        sed -i 's|\${APP_NAME}|'"$APP_NAME"'|g' ocp-kusto/base/deployment-w-storage.yaml ocp-kusto/overlays/release/deployment-w-storage-patch.yaml ocp-kusto/base/service.yaml  ocp-kusto/base/configmap-w-storage.yaml ocp-kusto/base/secret.yaml 
        sed -i 's|\${OPENSHIFT_NAMESPACE}|'"$OPENSHIFT_NAMESPACE"'|g' ocp-kusto/base/deployment-w-storage.yaml ocp-kusto/overlays/release/deployment-w-storage-patch.yaml ocp-kusto/base/service.yaml  ocp-kusto/base/configmap-w-storage.yaml ocp-kusto/base/secret.yam
        sed -i 's|\${IMAGE}|'"$IMAGE"'|g' ocp-kusto/base/deployment-w-storage.yaml ocp-kusto/base/service.yaml
        sed -i 's|\${APP_NAME}|'"$APP_NAME"'|g'  ocp-kusto/base/pvc.yaml ocp-kusto/overlays/release/configmap-patch.yaml ocp-kusto/overlays/release/service-patch.yaml 
        sed -i 's|\${OPENSHIFT_NAMESPACE}|'"$OPENSHIFT_NAMESPACE"'|g' ocp-kusto/base/pvc.yaml ocp-kusto/overlays/release/configmap-patch.yaml ocp-kusto/overlays/release/service-patch.yaml
        sed -i 's|\${APP_NAME}|'"$APP_NAME"'|g' ocp-kusto/base/route.yaml
        sed -i 's|\${OPENSHIFT_NAMESPACE}|'"$OPENSHIFT_NAMESPACE"'|g' ocp-kusto/base/route.yaml
        
        oc apply -f ocp-kusto/base/pvc.yaml
        oc apply -f ocp-kusto/base/configmap-w-storage.yaml -f ocp-kusto/base/secret.yaml
        oc apply -f ocp-kusto/base/deployment-w-storage.yaml -f ocp-kusto/base/service.yaml
        
        oc apply -k ocp-kusto/overlays/release 
        oc get pods

    - name: get route
      run: | 
        ROUTE=$(oc get route ${{ env.APP_NAME }} -n ${{ env.OPENSHIFT_NAMESPACE }} -o jsonpath='{.spec.host}')

        echo "The route is: http://$ROUTE"
